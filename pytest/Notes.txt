- url: https://www.youtube.com/watch?v=cHYq1MRoyI0&t=16s
- time: 31:14
- sorce module
- test module
    - name should be test_module_name
    - test_function: test_function_name
    - the test module should contain __init__.py, otherwise will generate error
    - import the souce module in the test module
- run the test: pytest test_file.py
    - pytest tests/test_app.py

- setup and teardown methods
    - setup method run before the test code
    - teardown mehod run after the tests are run
    - to see the prints in the setting up and tearing down methods we need to use
        - pytest test/test_class_app.py -s

- pytest.fixture
    - @pytest.fixture
    - define a function that can be used in different test fucntions

- global context
    - conftest.py
    - can be used in multiple test files

- pytest marking & parameterizing
    - makring a test as slow
        - @pytest.mark.slow
        - can run only the slow test -> pytest /test/test_app.py -m slow
    
- skip test
    - @pytest.mark.skip(reason='reature is broken')

- test fail
    - @pytest.mark.xfail(reason=='can't divide by 0')
    - say 1 xfail in the test report

- parameterize
    - check multiple values to a fucntion 
    - @pytest.mark.parametrize("side_length, expected_area", [(2, 4), (5, 25), (9, 81), (10, 100)])

- Mocking
    - isolate the system that is using for testing
    - use cases
        - testing on a web-api, at the time of testing we don't want to use the api 
            - may be down at the time of testing
            - need to incure the cost 
            - but we know the o/p of the api

        
